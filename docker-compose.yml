name: ritual-dev
services:
  db:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s

  redis:
    image: redis:7-alpine
    restart: always
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  mailhog:
    image: mailhog/mailhog:v1.0.1
    restart: always
    ports:
      - "127.0.0.1:8025:8025" # UI только локально (доступ через SSH-туннель)
    environment:
      MH_UI_BIND_ADDR: 0.0.0.0:8025
      MH_API_BIND_ADDR: 0.0.0.0:8025
      MH_SMTP_BIND_ADDR: 0.0.0.0:1025

  api:
    working_dir: /app/apps/api
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      args:
         PRISMA_SRC: apps/api/prisma
         PRISMA_SCHEMA_PATH: /app/apps/api/prisma/schema.prisma
    restart: always
    env_file: .env
    environment:
      PORT: 3001
      UPLOADS_ROOT: /uploads
      REDIS_URL: ${REDIS_URL}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_SECURE: ${SMTP_SECURE}
      MAIL_FROM: ${MAIL_FROM}
      PRISMA_SCHEMA_PATH: /app/apps/api/prisma/schema.prisma
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      mailhog:
        condition: service_started
    volumes:
      - uploads:/uploads
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3001/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20
      start_period: 15s

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      args:
        API_BASE: ${API_BASE}
    restart: always
    env_file: .env
    depends_on:
      - api
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20
      start_period: 15s

  caddy:
    image: caddy:2.8
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - web
      - api

volumes:
  db_data: {}
  uploads: {}
  redis_data: {}
  caddy_data: {}
  caddy_config: {}
