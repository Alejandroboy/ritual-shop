name: ritual-production
services:
  caddy:
    image: caddy:2.8
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      web:
        condition: service_started

  db:
    image: postgres:16-alpine
    container_name: ritual_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_HOST_PORT}:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 20
  #    networks: [ stack ]

  redis:
    image: redis:7-alpine
    container_name: ritual_redis
    command: [ "redis-server", "--appendonly", "yes" ]
    restart: unless-stopped
    ports:
      - "${REDIS_HOST_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 20
#    networks: [ stack ]

  mailhog:
    image: mailhog/mailhog:latest
    container_name: ritual_mailhog
    restart: unless-stopped
    ports:
      - "${MAILHOG_SMTP_PORT}:1025"  # SMTP
      - "${MAILHOG_UI_PORT}:8025"    # Web UI
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "1025" ]
      interval: 5s
      timeout: 3s
      retries: 20
#    networks: [ stack ]

#  migrator:
#    image: ritual_api
#    depends_on:
#      db:
#        condition: service_healthy
#    environment:
#      DATABASE_URL: ${DATABASE_URL}
#      SEED_ENABLED: "true"              # можно выключить, когда не нужен
#    entrypoint: [ "sh", "-lc" ]
#    command:  >
#      npx prisma migrate deploy
#      && node prisma/seed-once.js
#    restart: "no"z

  api:
    container_name: ritual_api
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    env_file: .env
    environment:
      PORT: 3001
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
    depends_on:
      - db
    ports:
      - "3001:3001"
#    networks: [ stack ]
  web:
    container_name: ritual_web
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    env_file: ./apps/web/.env.local
    environment:
      NODE_ENV: production
      PORT: "3000"
      API_BASE: "http://api:3001/api"
      NEXT_PUBLIC_API_BASE: ""
    depends_on:
      - api
    ports:
      - "3000:3000"


networks:
  stack:
    driver: bridge

volumes:
  pg_data:
  redis_data:
  caddy_data:
  caddy_config:
