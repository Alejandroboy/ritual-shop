name: ritual-development
services:
  db:
    image: postgres:16-alpine
    container_name: ritual_postgres
    restart: unless-stopped
    profiles: ["infrastructure"]
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_HOST_PORT}:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 20
  #    networks: [ stack ]

  redis:
    image: redis:7-alpine
    container_name: ritual_redis
    command: [ "redis-server", "--appendonly", "yes" ]
    restart: unless-stopped
    profiles: ["infrastructure"]
    ports:
      - "${REDIS_HOST_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 20
  #    networks: [ stack ]

  mailhog:
    image: mailhog/mailhog:latest
    container_name: ritual_mailhog
    restart: unless-stopped
    profiles: ["infrastructure"]
    ports:
      - "${MAILHOG_SMTP_PORT}:1025"  # SMTP
      - "${MAILHOG_UI_PORT}:8025"    # Web UI
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "1025" ]
      interval: 5s
      timeout: 3s
      retries: 20
  #    networks: [ stack ]

#  api:
#    container_name: ritual_api
#    build:
#      context: .
#      dockerfile: ./apps/api/development.Dockerfile
#    env_file: ./apps/api/.env
#    environment:
#      PORT: 3001
#      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"
#      REDIS_HOST: redis
#      REDIS_PORT: 6379
#      SMTP_HOST: mailhog
#      SMTP_PORT: 1025
#    depends_on:
#      - db
#    volumes:
#      - ../apps/api/:/app/
#    ports:
#      - "3001:3001"
##    networks: [ stack ]
#
#  web:
#    container_name: ritual_web
#    build:
#      context: .
#      dockerfile: ./apps/web/development.Dockerfile
#    env_file: ./apps/web/.env.local
#    environment:
#      API_BASE: "http://api:3001/api"
#      NEXT_PUBLIC_API_BASE: ""
#    working_dir: "/app"
#    command: "yarn dev"
#    depends_on:
#      - api
#    volumes:
#      - ../apps/web/:/app
#    ports:
#      - "3000:3000"


networks:
  stack:
    driver: bridge

volumes:
  pg_data:
  redis_data:
